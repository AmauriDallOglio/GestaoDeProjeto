@page "/projeto"

@using GestaoDeProjeto.Dominio;

@inject HttpClient Http
@using System.Collections.Generic
@using GestaoDeProjeto.Dominio.Entidade;
@inject IJSRuntime JSRuntime



<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <meta charset="UTF-8">
    <title>Página das empresas</title>
        <style>

            body {
                font-family: Arial, sans-serif;
            }

            h3 {
                text-align: center; /* Centraliza o texto */
                color: #333; /* Define a cor do texto */
            }

            .container {
                display: flex; /* Usa o modelo de layout flexível */
                justify-content: space-between; /* Distribui o espaço entre os elementos filhos */
                align-items: center; /* Alinha os itens verticalmente */
                height: 100vh; /* Define a altura como 100% da altura da janela */
                padding: 20px; /* Adiciona espaçamento interno */
            }

            .espaco {
                margin-bottom: 20px; /* Adiciona espaço entre grupos de formulários */
            }

            .espaco-10 {
                margin-bottom: 10px; /* Adiciona espaço entre grupos de formulários */
            }

  
            .btn-Adicionar {
                background-color: #007bff; /* Cor de fundo azul */
                color: #fff; /* Cor do texto branco */
                padding: 10px 15px; /* Espaçamento interno do botão */
                border: 1px solid #007bff; /* Uma borda sólida de 1px com cor vermelha (#FF0000) */
                border-radius: 10px; /* Borda arredondada */
                cursor: pointer; /* Cursor ao passar sobre o botão */
            }.btn-Adicionar:hover {
                background-color: #0000FF; /* Cor de fundo alterada ao passar o mouse */
                color: #fff; /* Cor do texto branco */
            }


            .btn-Atualizar {
                color: #FFA500; /* Cor do texto */
                background-color: transparent; /* Fundo transparente */
                background-image: none; /* Remove qualquer imagem de fundo */
                border-color: #FFA500; /* Cor da borda */
                padding: 10px 15px; /* Espaçamento interno do botão */
                border: 1px solid #FFA500; /* Uma borda sólida de 1px com cor vermelha (#FF0000) */
                border-radius: 10px; /* Borda arredondada */
                cursor: pointer; /* Cursor ao passar sobre o botão */
            }.btn-Atualizar:hover {
                color: #fff; /* Cor do texto quando em hover */
                background-color: #FFA500; /* Fundo laranja quando em hover */
                border-color: #FFA500; /* Cor da borda quando em hover */
            }
        </style>
    </head>

    <body>
        <h2 class="espaco">Cadastro de Empresas</h2>

        @if (!string.IsNullOrWhiteSpace(erro))
        {
            <div class="alert alert-danger" role="alert">
                @erro
            </div>
        }

        @if (!string.IsNullOrWhiteSpace(sucesso))
        {
            <div class="alert alert-success" role="alert">
                @sucesso
            </div>
        }

        <form class="row g-3">            <!-- row para criar uma linha e g-3 para adicionar um espaçamento entre os elementos filhos -->
            <div class="col-md-4">                  <!-- Cria uma coluna que ocupará 4 unidades de largura em dispositivos de tamanho médio (md). -->
                <div class="form-floating mb-3">    <!-- Define um contêiner com um espaçamento inferior (mb-3) para os elementos filhos. -->
                    <input type="text" class="form-control" id="descricao" placeholder="Descrição" @bind="@novaEmpresa" required>
                    <label for="floatingInput">Informe a descrição</label>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-floating mb-3">
                    <input type="text" class="form-control" id="" placeholder="Descrição" >
                    <label for="floatingInput">Campo de teste</label>
                </div>
            </div>
            <div class="col-md-4">  
                <div class="form-floating mb-3">  
                    <input type="text" class="form-control" id="" placeholder="Descrição">
                    <label for="floatingInput">Campo de teste</label>
                </div>
            </div>
            <div class="col-md-4">  
                <div class="form-floating mb-3">  
                    <input type="text" class="form-control" id="" placeholder="Descrição">
                    <label for="floatingInput">Campo de teste</label>
                </div>
            </div>
        </form>

        <div class="espaco">
            <button type="button" class="btn btn-Adicionar" @onclick="AdicionarEmpresa">Adicionar</button>
            <button type="button" class="btn btn-Atualizar" @onclick="AtualizarGrid"> Atualizar </button>
 
        </div>
         


        @if (empresas != null && empresas.Any())
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>
                            <input type="checkbox" id="selecionarTodos" onchange="selecionarTodos()">
                        </th>
                        <th>Id</th>
                        <th>Descrição</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var empresa in empresas)
                    {
                         <tr>
                            <td>
                                <input type="checkbox" @onchange="() => SelecionarEmpresa(empresa)">
                            </td>
                            <td>@empresa.Id</td>
                            <td @onclick="() => SelecionarEmpresa(empresa)">
                                @empresa.Descricao
                            </td>
                        </tr>
                        @if (empresaSelecionada == empresa)
                        {
                            <tr>
                                <td colspan="3">
                                    <button class="btn btn-primary" @onclick="() => EditarEmpresa(empresa)">Editar</button>
                                    <button class="btn btn-danger" @onclick="() => ShowModal(empresa)"  > Excluir </button>
                                   

                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
        else
        {
            <p>Carregando...</p>
        }
    </body>
</html>

<!-- Modal -->
@if (empresaSelecionadaExcluir != null)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmação de Exclusão</h5>
                    @*<button type="button" class="btn-close" @onclick="HideModal"></button>*@
                </div>
                <div class="modal-body">
                    Tem certeza de que deseja excluir a empresa: <strong>@empresaSelecionadaExcluir.Descricao</strong>?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelarEmpresaSelecionada">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="ExcluirEmpresaSelecionada">Excluir</button>
                </div>
            </div>
        </div>
    </div>
}



@code {
    private Projeto[]? forecasts;

    private List<Projeto> empresas;
    private Projeto novaEmpresa = new Projeto();
    private string erro;
    private string sucesso;


    string searchTerm = "";

    private string descricao1;

  

    protected override async Task OnInitializedAsync()
    {

        await CarregarEmpresas();
    }


    private async Task CarregarEmpresas()
    {
        empresas = await Http.GetFromJsonAsync<List<Projeto>>("/empresa/BuscarTodos");
        // forecasts = await Http.GetFromJsonAsync<EmpresaDto[]>("Empresa");
    }


    private async Task AtualizarGrid()
    {
        try
        {
            novaEmpresa = new Projeto();
            await CarregarEmpresas(); 
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro inesperado: " + ex.Message;
            AtivarTemporizadorErro();
        }
    }

    private async Task selecionarTodos()
    {
        await JSRuntime.InvokeVoidAsync("selecionarTodos");
    }

 



    private async Task AdicionarEmpresa()
    {
        try
        {
            if (string.IsNullOrEmpty(novaEmpresa.Descricao))
            {
                erro = "Descrição não possui informação!";
                AtivarTemporizadorErro();
            }
            else
            {
                var response = await Http.PostAsJsonAsync<Projeto>("/empresa/Incluir", novaEmpresa);

                if (response.IsSuccessStatusCode)
                {
                    await CarregarEmpresas();
                    sucesso = "Salvo com sucesso!";
                    AtivarTemporizadorSucesso();
                }
                else
                {
                    erro = "Ocorreu um erro ao adicionar a empresa. Por favor, tente novamente.";
                    AtivarTemporizadorErro();
                }
            }
        }
        catch (Exception ex)
        {
            erro = "Ocorreu um erro inesperado: " + ex.Message;
            AtivarTemporizadorErro();
        }
    }

    private async Task AtivarTemporizadorErro()
    {
        await Task.Delay(2000); // Aguarda segundos
        erro = null;
        sucesso = null;
        StateHasChanged(); // Notifica o Blazor para atualizar a exibição
    }

    private async Task AtivarTemporizadorSucesso()
    {
        await Task.Delay(2000); // Aguarda segundos
        erro = null;
        sucesso = null;
        StateHasChanged(); // Notifica o Blazor para atualizar a exibição
    }


      

  

    private Projeto empresaSelecionada = null;

    private void SelecionarEmpresa(Projeto empresa)
    {
        if (empresaSelecionada == empresa)
        {
            empresaSelecionada = null;
        }
        else
        {
            empresaSelecionada = empresa;
        }
    }

    private void EditarEmpresa(Projeto empresa)
    {
        sucesso = "Vai editar ID " + empresa.Id + " Descrição: " + empresa.Descricao;
        empresaSelecionada = null;
        AtivarTemporizadorSucesso();
    }

    private void ExcluirEmpresa(Projeto empresa)
    {
        sucesso = "Vai excluir ID " + empresa.Id + " Descrição: " + empresa.Descricao;
        empresaSelecionada = null;
        AtivarTemporizadorSucesso();

    }

     
  
    private Projeto empresaSelecionadaExcluir = null;
    void ShowModal(Projeto empresa)
    {
        empresaSelecionadaExcluir = empresa;
    }

    void ExcluirEmpresaSelecionada()
    {
        sucesso = "Excluído ID " + empresaSelecionadaExcluir.Id + " Descrição: " + empresaSelecionadaExcluir.Descricao + " com sucesso!";
        empresas.Remove(empresaSelecionadaExcluir);
        empresaSelecionadaExcluir = null; // Limpa a empresa selecionada
        empresaSelecionada = null;
        AtivarTemporizadorSucesso();
    }

    void CancelarEmpresaSelecionada()
    {
        empresaSelecionadaExcluir = null; // Limpa a empresa selecionada
        StateHasChanged(); // Notifica o Blazor para atualizar a exibição
    }

    void HideModal()
    {
        empresaSelecionada = null;
    }

}
 